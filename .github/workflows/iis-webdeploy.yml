name: Deploy to IIS [Tritontek VM Staging Environment]

# Run when commits are pushed to main
on:
  push:
    branches:
      - dev-azurevm
  pull_request:
    types: [opened, synchronize, reopened, closed]
    branches:
      - dev-azurevm

jobs:
  build-and-deploy:
    runs-on: tritontek-lacrosse-vm

    steps:
      # Enable long paths in Git before checkout
      - name: Configure Git for long paths
        run: |
          git config --global core.longpaths true
        shell: powershell

      # Use actions/checkout with specific config
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          lfs: true
          clean: true

      # Set up .NET SDK
      - name: Setup .NET 9 SDK in user folder
        shell: powershell
        run: |
          $dotnetRoot = "C:\dotnet-sdk"
          $env:DOTNET_ROOT = $dotnetRoot
          [System.Environment]::SetEnvironmentVariable('DOTNET_ROOT', $dotnetRoot, 'Process')
          echo "DOTNET_ROOT=$dotnetRoot" | Out-File -Append $env:GITHUB_ENV
          echo "$dotnetRoot" | Out-File -Append $env:GITHUB_PATH
          
          Invoke-WebRequest https://dotnet.microsoft.com/download/dotnet/scripts/v1/dotnet-install.ps1 -OutFile dotnet-install.ps1
          ./dotnet-install.ps1 -Channel 9.0 -InstallDir $dotnetRoot

      # Publish the project
      - name: Publish the project
        shell: powershell
        run: |
          dotnet publish api/server/Server.csproj --configuration Release --output ./publish -p:EnableContainerBuild=false -p:ContainerImageTags= -p:ContainerRegistry= -p:PublishProfile=

      - name: Deploy published files to IIS folder
        shell: powershell
        env:
          DESTINATION_PATH: C:\WebApps\BudgetRequestWebService
          IIS_WEBSITE_NAME: BudgetRequestWebService
          IIS_APPPOOL_NAME: BudgetRequestWebService # <-- Update this to match your actual App Pool name
        run: |
          Write-Host "--- Starting File Deployment ---"

          $source = "${{ github.workspace }}\publish"
          $destination = "${{ env.DESTINATION_PATH }}"
          $iisWebsiteName = "${{ env.IIS_WEBSITE_NAME }}"
          $iisAppPoolName = "${{ env.IIS_APPPOOL_NAME }}"
          $appOfflinePath = Join-Path $destination "app_offline.htm"

          try {
              Write-Host "Stopping IIS App Pool '$iisAppPoolName'..."
              Import-Module WebAdministration -ErrorAction Stop
              Stop-WebAppPool -Name $iisAppPoolName -ErrorAction Stop
              Write-Host "App Pool '$iisAppPoolName' stopped successfully."

              Write-Host "Stopping IIS website '$iisWebsiteName'..."
              Stop-Website -Name $iisWebsiteName -ErrorAction Stop
              Write-Host "IIS website '$iisWebsiteName' stopped successfully."
          } catch {
              Write-Warning "Could not stop IIS site or app pool. Error: $($_.Exception.Message)"
          }

          Write-Host "Ensuring destination directory '$destination' exists..."
          if (!(Test-Path $destination)) {
              New-Item -ItemType Directory -Force -Path $destination | Out-Null
              Write-Host "Created destination directory: $destination"
          } else {
              Write-Host "Destination directory already exists: $destination"
          }

          # Place app_offline.htm
          Write-Host "Placing app_offline.htm to unload app domain..."
          Set-Content $appOfflinePath "App is offline for deployment. Please try again later."

          Write-Host "Deploying files from '$source' to '$destination' using Robocopy..."
          robocopy $source $destination /MIR /Z /NP /R:3 /W:5 /XD logs /XF *.log /ETA /V

          $robocopyExitCode = $LASTEXITCODE

          if ($robocopyExitCode -ge 8) {
              Write-Error "Robocopy failed with exit code $robocopyExitCode. Check logs for details."
              exit 1
          } elseif ($robocopyExitCode -gt 0) {
              Write-Warning "Robocopy completed with warnings (exit code $robocopyExitCode)."
          } else {
              Write-Host "Robocopy completed successfully (exit code 0)."
          }

          # Remove app_offline.htm
          if (Test-Path $appOfflinePath) {
              Remove-Item $appOfflinePath -Force
              Write-Host "Removed app_offline.htm."
          }

          try {
              Write-Host "Starting App Pool '$iisAppPoolName'..."
              Start-WebAppPool -Name $iisAppPoolName -ErrorAction Stop
              Write-Host "App Pool '$iisAppPoolName' started."

              Write-Host "Starting IIS Website '$iisWebsiteName'..."
              Start-Website -Name $iisWebsiteName -ErrorAction Stop
              Write-Host "IIS Website '$iisWebsiteName' started."
          } catch {
              Write-Error "Failed to restart IIS site or app pool. Error: $($_.Exception.Message)"
              exit 1
          }

          Write-Host "--- File Deployment Completed ---"
          $LASTEXITCODE = 0