name: Deploy to IIS to Lacrosse

# Run when commits are pushed to main
on:
  push:
    branches:
      - dev
  pull_request:
    types: [opened, synchronize, reopened, closed]
    branches:
      - dev

jobs:
  build-and-deploy:
    runs-on: LAX-FINAPP1-DEV-BACKEND

    steps:
      # Check out the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Set up .NET SDK
      - name: Setup .NET 9 SDK in user folder
        shell: powershell
        run: |
          $dotnetRoot = "C:\dotnet-sdk"
          $env:DOTNET_ROOT = $dotnetRoot
          [System.Environment]::SetEnvironmentVariable('DOTNET_ROOT', $dotnetRoot, 'Process')
          echo "DOTNET_ROOT=$dotnetRoot" | Out-File -Append $env:GITHUB_ENV
          echo "$dotnetRoot" | Out-File -Append $env:GITHUB_PATH
          
          Invoke-WebRequest https://dotnet.microsoft.com/download/dotnet/scripts/v1/dotnet-install.ps1 -OutFile dotnet-install.ps1
          ./dotnet-install.ps1 -Channel 9.0 -InstallDir $dotnetRoot

      # Publish the project
      - name: Publish the project
        shell: powershell
        run: |
          dotnet publish api/server/Server.csproj --configuration Release --output ./publish -p:EnableContainerBuild=false -p:ContainerImageTags= -p:ContainerRegistry= -p:PublishProfile=

      - name: Deploy published files to IIS folder
        shell: powershell # Using pwsh (PowerShell Core) is generally preferred for runners
        env:
          # Define variables for clarity and easy modification
          # Ensure this matches the actual physical path of your IIS website's wwwroot
          DESTINATION_PATH: C:\inetpub\wwwroot\BudgetRequestWebService
          IIS_WEBSITE_NAME: BudgetRequestWebService # The exact name of your IIS website for stopping/starting

        run: |
            Write-Host "--- Starting File Deployment ---"

            $source = "${{ github.workspace }}\publish"
            $destination = "${{ env.DESTINATION_PATH }}"
            $iisWebsiteName = "${{ env.IIS_WEBSITE_NAME }}"

            # --- Step 1: Stop IIS Website Gracefully (if not done previously) ---
            # This is crucial for avoiding file locking issues during copy.
            # If you're doing a full msdeploy then these stop/start might be redundant
            # but for direct file copy, they are essential.
            try {
                Write-Host "Stopping IIS website '$iisWebsiteName'..."
                Import-Module WebAdministration -ErrorAction Stop # Ensure module is loaded
                Stop-Website -Name $iisWebsiteName -ErrorAction Stop
                Write-Host "IIS website '$iisWebsiteName' stopped successfully."
            } catch {
                Write-Warning "Could not stop IIS website '$iisWebsiteName'. It might already be stopped or named incorrectly. Error: $($_.Exception.Message)"
                # Continue if unable to stop, but be aware of potential file locking.
            }

            # --- Step 2: Ensure destination directory exists ---
              Write-Host "Ensuring destination directory '$destination' exists..."
              try {
                  if (!(Test-Path $destination)) {
                      New-Item -ItemType Directory -Force -Path $destination | Out-Null
                      Write-Host "Created destination directory: $destination"
                  } else {
                      Write-Host "Destination directory already exists: $destination"
                  }
              } catch {
                  Write-Error "Failed to ensure destination directory: $($_.Exception.Message)"
                  exit 1
              }

            # --- Step 3: Perform Robocopy Deployment ---
              Write-Host "Deploying files from '$source' to '$destination' using Robocopy..."
              Write-Host "Robocopy command: robocopy $source $destination /MIR /Z /NP /R:3 /W:5 /XD logs /XF *.log"
              robocopy $source $destination /MIR /Z /NP /R:3 /W:5 /XD logs /XF *.log /ETA /V

              $robocopyExitCode = $LASTEXITCODE

              if ($robocopyExitCode -ge 8) {
                Write-Error "Robocopy failed with exit code $robocopyExitCode. Check logs for details."
                exit 1
              } elseif ($robocopyExitCode -gt 0) {
                Write-Warning "Robocopy completed with warnings (exit code $robocopyExitCode). Files copied, but check for mismatches or extra files."
              } else {
                Write-Host "Robocopy completed successfully with exit code $robocopyExitCode (no files copied or no changes needed)."
              }

             # --- Step 4: Start IIS Website ---
              try {
                  Write-Host "Starting IIS website '$iisWebsiteName'..."
                  Import-Module WebAdministration -ErrorAction Stop
                  Start-Website -Name $iisWebsiteName -ErrorAction Stop
                  Write-Host "IIS website '$iisWebsiteName' started successfully."
              } catch {
                  Write-Error "Failed to start IIS website '$iisWebsiteName'. Error: $($_.Exception.Message)"
                  exit 1
              }

              Write-Host "--- File Deployment Completed ---"
              $LASTEXITCODE = 0
